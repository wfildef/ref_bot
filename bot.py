#–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import telebot
from telebot import types
import time

#–∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
import config
from sqliteTools import execute_query_one_component, execute_query_two_component

#–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ 
bot = telebot.TeleBot(config.botToken)

#—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
@bot.message_handler(commands=['start'])
def start_message(message):
    existUser = execute_query_one_component("SELECT EXISTS(SELECT userid FROM users WHERE userid = ?)", message.chat.id)[0][0]

    if existUser == 0:
        addUser = "INSERT INTO users (userid, daysSinceJoin, balance, countPartners, wasReward, existSubscribe) VALUES (?, 0, 0, 0, 0, 0)"
        execute_query_one_component(addUser, message.chat.id)

        if " " in message.text:
            referrer_candidate = message.text.split()[1]
            addRefInfo(message.chat.id, referrer_candidate)

        else:
            addRefInfo(message.chat.id, 0)

    linkForSub = execute_query_one_component("SELECT linkForSubscribe FROM channelData", "None")[0][0]

    markup = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url = linkForSub), types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="CheckSubscribe")]
    markup.add(buttons[0], buttons[1])

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=markup)  
    
@bot.message_handler(commands=['update'])
def updateLink(message):
    if message.chat.id == config.adminID:
        resetSubcribe(message)

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é
@bot.message_handler(content_types=['text'])
def sendInfo(message):
    id = message.chat.id

    statusSubscribe = getSubcribeStatus(message)

    if not statusSubscribe:
        start_message(message)

    elif statusSubscribe:
        if message.text == "üë•–ü–∞—Ä—Ç–Ω–µ—Ä—ã":
            refMsg = getMessage("messages/refInfo.txt")

            bot.send_message(id, refMsg.format(countPartners = getUserCountPartners(id),
                                               balance = getUserBalance(id),
                                               botName = config.botName,
                                               userid = message.chat.id,    
                                               reward = config.reward), parse_mode="HTML")

        elif message.text == "üñ•–ü—Ä–æ—Ñ–∏–ª—å":
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üíµ–í—ã–≤–µ—Å—Ç–∏", callback_data="conclusion"))
            
            profileMsg = getMessage("messages/profile.txt")
            profileMsg = profileMsg.format(countDays = getUserCountDays(id),
                                           userid = id,
                                           balance = getUserBalance(id))
    
            bot.send_message(id, profileMsg,reply_markup=markup, parse_mode="HTML")

        elif message.text == "‚ÑπÔ∏è–û –±–æ—Ç–µ":
            markup = types.InlineKeyboardMarkup()

            buttons = [types.InlineKeyboardButton("üí¨–ß–∞—Ç", url=config.chatLink), 
            types.InlineKeyboardButton("üí≥–í—ã–ø–ª–∞—Ç—ã", url=config.paymentsLink),
            types.InlineKeyboardButton("üßë‚Äçüíª–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url=config.adminLink),
            types.InlineKeyboardButton("üöÄ–•–æ—á—É —Ç–∞–∫–æ–≥–æ-–∂–µ –±–æ—Ç–∞", url=config.developerLink)]

            for button in buttons:
                markup.add(button)

            bot.send_message(id, "üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–º –±–æ—Ç–µ", reply_markup=markup)

    checkDate(message)

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏–∑ Inline –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda callback:True)
def inlin(callback):
    if callback.data == 'CheckSubscribe':
        existUserInChannel = getSubcribeStatus(callback.message)

        if existUserInChannel:
            bot.answer_callback_query(callback.id, text='–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å. –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!', show_alert=True)

            refID = execute_query_one_component("SELECT refid FROM users WHERE userid = ?", callback.message.chat.id)[0][0]
            statusReward = execute_query_one_component("SELECT wasReward FROM users WHERE userid = ?", callback.message.chat.id)[0][0]

            if refID != 0 and statusReward == 0:
                addRewardForRef = "UPDATE users SET balance = balance + ? WHERE userid = ?"
                execute_query_two_component(addRewardForRef, config.reward, refID)

                addCountPartners = "UPDATE users SET countPartners = countPartners + 1 WHERE userid = ?"
                execute_query_one_component(addCountPartners, refID)

                changeStatusReward = "UPDATE users SET wasReward = 1 WHERE userid = ?"
                execute_query_one_component(changeStatusReward, callback.message.chat.id)

            sendMenu(callback.message.chat.id)
        else:
            bot.answer_callback_query(callback.id, text='–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!', show_alert=True)

    if callback.data == 'conclusion':
        conclusionMsg = getMessage("messages/conclusion.txt")
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text=conclusionMsg)

#–æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def sendMenu(chatID):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    buttons = [types.KeyboardButton("üñ•–ü—Ä–æ—Ñ–∏–ª—å"),
               types.KeyboardButton("üë•–ü–∞—Ä—Ç–Ω–µ—Ä—ã"),
               types.KeyboardButton("‚ÑπÔ∏è–û –±–æ—Ç–µ")]

    markup.add(buttons[0], buttons[1])
    markup.add(buttons[2])

    bot.send_message(chatID, "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –º–µ–Ω—é: ", reply_markup=markup)

#–ø–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def getMessage(path):
    message = ""
    with open(path, encoding = "utf-8") as file:
        while True:
            line = file.readline()

            if not line:
                break
            message+=line
        return message

#–ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def getUserBalance(userid):
    query = "SELECT balance FROM users WHERE userid = ?"
    balance = execute_query_one_component(query, userid)[0][0]
    return balance
    
#–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —é–∑–µ—Ä–æ–≤
def getUserCountPartners(userid):
    query = "SELECT countPartners FROM users WHERE userid = ?"
    countPartners = execute_query_one_component(query, userid)[0][0]
    return countPartners

#–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤ –±–æ—Ç–µ
def getUserCountDays(userid):
    query = "SELECT daysSinceJoin FROM users WHERE userid = ?"
    countDays = execute_query_one_component(query, userid)[0][0]
    return countDays

#–ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
def checkDate(message):
    query = "SELECT currentDay FROM dates"
    dateInTable = execute_query_one_component(query, "None")[0][0]
    
    tconv = lambda x: time.strftime("%d", time.localtime(x))
    currentDay = int(tconv(message.date))

    if currentDay != dateInTable:
        execute_query_one_component("UPDATE dates SET currentDay = ?", currentDay)
        execute_query_one_component("UPDATE users SET daysSinceJoin = daysSinceJoin +  1", "None")

#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def addRefInfo(id, refInfo):
    execute_query_two_component("UPDATE users SET refid = ? WHERE userid = ?", refInfo, id)

#–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
def updateLink(message):
    try:
        execute_query_two_component("UPDATE channelData SET linkForSubscribe = ?, channelID = ?", 
                                                message.text.split(";")[0],
                                                message.text.split(";")[1])

        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        sendMenu(message.chat.id)
    except:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")

#–ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def getSubcribeStatus(message):
    try:
        channelID = execute_query_one_component("SELECT channelID FROM channelData", "None")[0][0]
        response = bot.get_chat_member(channelID, message.chat.id)

        if response.status == 'left':
            changeStatusSubscribe = "UPDATE users SET existSubscribe = 0 WHERE userid = ?"
            execute_query_one_component(changeStatusSubscribe, message.chat.id)
            return False

        else:
            changeStatusSubscribe = "UPDATE users SET existSubscribe = 1 WHERE userid = ?"
            execute_query_one_component(changeStatusSubscribe, message.chat.id)
            return True

    except:
        print("–ë–æ—Ç –Ω–µ –Ω–∞—à—ë–ª –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª. –û—à–∏–±–∫–∞ –≤ ID, –ª–∏–±–æ –±–æ—Ç–∞ –Ω–µ—Ç –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö!")
        changeStatusSubscribe = "UPDATE users SET existSubscribe = 0 WHERE userid = ?"
        execute_query_one_component(changeStatusSubscribe, message.chat.id)
        return False

#—Å–±—Ä–æ—Å –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
def resetSubcribe(message):
    execute_query_one_component("UPDATE users SET existSubscribe = 0", "None")
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏ –∞–π–¥–∏ —á–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: https://example.com;-1929202002")
    bot.register_next_step_handler(message, updateLink)


#–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.polling(none_stop=True, interval=0) 

